import sys
sys.path.insert(0, r"C:\Users\Siam\Desktop\tvdatafeed_full")

from tvdatafeed import TvDatafeed
import streamlit as st
from tradingview_ta import TA_Handler, Interval
import pandas as pd
import plotly.graph_objects as go

# ‚úÖ Candlestick Pattern Checker
def detect_candlestick_pattern(df):
    last = df.iloc[-2]  # ‡¶∂‡ßá‡¶∑ ‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶ï‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤
    body = abs(last['close'] - last['open'])
    candle_range = last['high'] - last['low']
    upper_shadow = last['high'] - max(last['open'], last['close'])
    lower_shadow = min(last['open'], last['close']) - last['low']

    if body < candle_range * 0.3:
        if upper_shadow > body * 2 and lower_shadow < body * 0.5:
            return "Inverted Hammer"
        elif lower_shadow > body * 2 and upper_shadow < body * 0.5:
            return "Hammer"
        elif body < candle_range * 0.1:
            return "Doji"
    return None

# ‚úÖ Filter Function
def get_filtered_signal(symbol, screener="forex", exchange="FX_IDC", interval=Interval.INTERVAL_1_MINUTE):
    try:
        handler = TA_Handler(
            symbol=symbol,
            screener=screener,
            exchange=exchange,
            interval=interval
        )
        analysis = handler.get_analysis()
        summary = analysis.summary
        indicators = analysis.indicators

        recommendation = summary.get("RECOMMENDATION")
        rsi = indicators.get("RSI")
        macd = indicators.get("MACD.macd")
        signal_macd = indicators.get("MACD.signal")
        ema20 = indicators.get("EMA20")
        close_price = indicators.get("close")

        tv = TvDatafeed()
        candle_data = tv.get_hist(symbol=symbol, exchange="FX_IDC", interval="1m", n_bars=5)
        pattern = detect_candlestick_pattern(candle_data) if candle_data is not None and not candle_data.empty else None

        if recommendation in ["STRONG_BUY", "BUY"]:
            if (
                rsi and 45 < rsi < 70 and
                macd and signal_macd and macd > signal_macd and
                close_price and ema20 and close_price > ema20 and
                pattern in ["Hammer", "Inverted Hammer", "Doji"]
            ):
                return {
                    "symbol": symbol,
                    "recommendation": "BUY ‚úÖ",
                    "RSI": round(rsi, 2),
                    "MACD": round(macd, 2),
                    "EMA20": round(ema20, 2),
                    "Pattern": pattern
                }

        if recommendation in ["STRONG_SELL", "SELL"]:
            if (
                rsi and 30 < rsi < 55 and
                macd and signal_macd and macd < signal_macd and
                close_price and ema20 and close_price < ema20 and
                pattern in ["Doji"]
            ):
                return {
                    "symbol": symbol,
                    "recommendation": "SELL ‚úÖ",
                    "RSI": round(rsi, 2),
                    "MACD": round(macd, 2),
                    "EMA20": round(ema20, 2),
                    "Pattern": pattern
                }

        return None

    except Exception as e:
        return {"symbol": symbol, "recommendation": f"Error: {e}", "RSI": None, "MACD": None, "EMA20": None}

# ‚úÖ Streamlit App
st.set_page_config(page_title="Super Signal App", layout="wide")

st.markdown("<h1 style='text-align:center;color:#00ffff;'>üíπ Super Signal App</h1>", unsafe_allow_html=True)
st.markdown("<p style='text-align:center;color:gray;'>‡¶è‡¶á ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™ purely educational ‡¶è‡¶¨‡¶Ç research purpose ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø‡•§</p>", unsafe_allow_html=True)

bot_on = st.checkbox("‚úÖ Signal Bot ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶ï‡¶∞‡ßÅ‡¶®", value=False)
symbols = st.text_input("üìò ‡¶è‡¶ï‡¶æ‡¶ß‡¶ø‡¶ï Symbol ‡¶¶‡¶ø‡¶® (‡¶ï‡¶Æ‡¶æ ‡¶¶‡¶ø‡ßü‡ßá ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®)", value="EURUSD,GBPUSD,BTCUSDT")
interval = st.selectbox("üå∏ Interval ‡¶¨‡¶æ‡¶õ‡¶æ‡¶á ‡¶ï‡¶∞‡ßÅ‡¶®", ["1m", "5m", "15m", "1h"], index=0)

interval_map = {
    "1m": Interval.INTERVAL_1_MINUTE,
    "5m": Interval.INTERVAL_5_MINUTES,
    "15m": Interval.INTERVAL_15_MINUTES,
    "1h": Interval.INTERVAL_1_HOUR
}

# ‚úÖ Signal Button
if st.button("üöÄ Signal ‡¶è‡¶ñ‡¶®‡¶ø ‡¶¶‡ßá‡¶ñ‡¶æ‡¶ì") and bot_on:
    symbol_list = [s.strip() for s in symbols.split(",")]
    filtered_results = []

    for symbol in symbol_list:
        result = get_filtered_signal(symbol, interval=interval_map[interval])
        if result:
            filtered_results.append(result)

    if filtered_results:
        df = pd.DataFrame(filtered_results)
        st.success(f"‚úÖ {len(df)} ‡¶ü‡¶ø Sure-Shot Signal ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶ó‡ßá‡¶õ‡ßá!")
        st.dataframe(df, use_container_width=True)
    else:
        st.warning("üòî ‡¶ï‡ßã‡¶®‡ßã High-Probability Signal ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§")

    # ‚úÖ Candlestick Chart
    st.subheader(f"üìà {symbol_list[0]} ‡¶≤‡¶æ‡¶á‡¶≠ ‡¶ï‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤ ‡¶ö‡¶æ‡¶∞‡ßç‡¶ü")
    tv = TvDatafeed()
    try:
        candle_data = tv.get_hist(symbol=symbol_list[0], exchange="FX_IDC", interval=interval, n_bars=100)
        if not candle_data.empty:
            fig = go.Figure(data=[go.Candlestick(
                x=candle_data.index,
                open=candle_data["open"],
                high=candle_data["high"],
                low=candle_data["low"],
                close=candle_data["close"]
            )])
            fig.update_layout(xaxis_rangeslider_visible=False)
            st.plotly_chart(fig, use_container_width=True)
        else:
            st.warning("‚ùå ‡¶ï‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤ ‡¶°‡ßá‡¶ü‡¶æ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø!")
    except Exception as e:
        st.error(f"‚ö†Ô∏è ‡¶ö‡¶æ‡¶∞‡ßç‡¶ü ‡¶Ü‡¶®‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá: {e}")
else:
    st.info("üîî Signal Bot ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶è‡¶¨‡¶Ç 'Signal ‡¶è‡¶ñ‡¶®‡¶ø ‡¶¶‡ßá‡¶ñ‡¶æ‡¶ì' ‡¶¨‡¶æ‡¶ü‡¶® ‡¶ö‡¶æ‡¶™‡ßÅ‡¶®‡•§")
